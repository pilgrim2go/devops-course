apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker-compose/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: discourse
  name: discourse
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: discourse
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ../docker-compose/docker-compose.yml
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: discourse
    spec:
      containers:
      - name: discourse
        image: localhost:5000/bitnami/discourse:2-debian-10
        imagePullPolicy: ""
        env:
          - name: DISCOURSE_HOSTNAME
            value: www.example.com
          - name: DISCOURSE_POSTGRESQL_NAME
            value: bitnami_application
          - name: DISCOURSE_POSTGRESQL_PASSWORD
            value: bitnami1
          - name: DISCOURSE_POSTGRESQL_USERNAME
            value: bn_discourse
          - name: POSTGRESQL_CLIENT_CREATE_DATABASE_NAME
            value: bitnami_application
          - name: POSTGRESQL_CLIENT_CREATE_DATABASE_PASSWORD
            value: bitnami1
          - name: POSTGRESQL_CLIENT_CREATE_DATABASE_USERNAME
            value: bn_discourse
          - name: POSTGRESQL_HOST
            value: postgresql
          - name: POSTGRESQL_ROOT_USER
            value: postgres
          - name: REDIS_HOST
            value: redis
        ports:
        - containerPort: 3000
        resources: {}
        volumeMounts:
        - mountPath: /bitnami
          name: dockercompose-discourse-data
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: dockercompose-discourse-data
        persistentVolumeClaim:
          claimName: dockercompose-discourse-data
status: {}
